{"ast":null,"code":"// Token class\n\n'use strict';\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup = '';\n\n  /**\n   * Token#info -> String\n   *\n   * fence infostring\n   **/\n  this.info = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden = false;\n}\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n  if (!this.attrs) {\n    return -1;\n  }\n  attrs = this.attrs;\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [attrData];\n  }\n};\nmodule.exports = Token;","map":{"version":3,"names":["Token","type","tag","nesting","attrs","map","level","children","content","markup","info","meta","block","hidden","prototype","attrIndex","name","i","len","length","attrPush","attrData","push","module","exports"],"sources":["E:/Projects/ASPHENIX/Pokedex-AI-v1/node_modules/markdown-it/lib/token.js"],"sourcesContent":["// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * fence infostring\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\nmodule.exports = Token;\n"],"mappings":"AAAA;;AAEA,YAAY;;AAGZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAKA,CAACC,IAAI,EAAEC,GAAG,EAAEC,OAAO,EAAE;EACjC;AACF;AACA;AACA;AACA;EACE,IAAI,CAACF,IAAI,GAAOA,IAAI;;EAEpB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,GAAG,GAAQA,GAAG;;EAEnB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACE,KAAK,GAAM,IAAI;;EAEpB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,GAAG,GAAQ,IAAI;;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACF,OAAO,GAAIA,OAAO;;EAEvB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACG,KAAK,GAAM,CAAC;;EAEjB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,QAAQ,GAAG,IAAI;;EAEpB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,OAAO,GAAI,EAAE;;EAElB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,MAAM,GAAK,EAAE;;EAElB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,IAAI,GAAO,EAAE;;EAElB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,IAAI,GAAO,IAAI;;EAEpB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,KAAK,GAAM,KAAK;;EAErB;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,MAAM,GAAK,KAAK;AACvB;;AAGA;AACA;AACA;AACA;AACA;AACAb,KAAK,CAACc,SAAS,CAACC,SAAS,GAAG,SAASA,SAASA,CAACC,IAAI,EAAE;EACnD,IAAIZ,KAAK,EAAEa,CAAC,EAAEC,GAAG;EAEjB,IAAI,CAAC,IAAI,CAACd,KAAK,EAAE;IAAE,OAAO,CAAC,CAAC;EAAE;EAE9BA,KAAK,GAAG,IAAI,CAACA,KAAK;EAElB,KAAKa,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGd,KAAK,CAACe,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IAC5C,IAAIb,KAAK,CAACa,CAAC,CAAC,CAAC,CAAC,CAAC,KAAKD,IAAI,EAAE;MAAE,OAAOC,CAAC;IAAE;EACxC;EACA,OAAO,CAAC,CAAC;AACX,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACAjB,KAAK,CAACc,SAAS,CAACM,QAAQ,GAAG,SAASA,QAAQA,CAACC,QAAQ,EAAE;EACrD,IAAI,IAAI,CAACjB,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,CAACkB,IAAI,CAACD,QAAQ,CAAC;EAC3B,CAAC,MAAM;IACL,IAAI,CAACjB,KAAK,GAAG,CAAEiB,QAAQ,CAAE;EAC3B;AACF,CAAC;AAGDE,MAAM,CAACC,OAAO,GAAGxB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}