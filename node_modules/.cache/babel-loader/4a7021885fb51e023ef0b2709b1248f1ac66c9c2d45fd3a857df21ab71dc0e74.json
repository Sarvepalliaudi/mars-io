{"ast":null,"code":"// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar parseLinkLabel = require('../helpers/parse_link_label');\nvar parseLinkDestination = require('../helpers/parse_link_destination');\nvar parseLinkTitle = require('../helpers/parse_link_title');\nvar normalizeReference = require('../common/utils').normalizeReference;\nmodule.exports = function image(state, silent) {\n  var attrs,\n    code,\n    label,\n    labelEnd,\n    labelStart,\n    pos,\n    ref,\n    res,\n    title,\n    token,\n    tokens,\n    start,\n    href = '',\n    oldPos = state.pos,\n    max = state.posMax;\n  if (state.src.charCodeAt(state.pos) !== 0x21 /* ! */) {\n    return false;\n  }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B /* [ */) {\n    return false;\n  }\n  labelStart = state.pos + 2;\n  labelEnd = parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) {\n    return false;\n  }\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (code !== 0x20 && code !== 0x0A) {\n        break;\n      }\n    }\n    if (pos >= max) {\n      return false;\n    }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (code !== 0x20 && code !== 0x0A) {\n        break;\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (code !== 0x20 && code !== 0x0A) {\n          break;\n        }\n      }\n    } else {\n      title = '';\n    }\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') {\n      return false;\n    }\n\n    // [foo]  [bar]\n    //      ^^ optional whitespace (can include newlines)\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (code !== 0x20 && code !== 0x0A) {\n        break;\n      }\n    }\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */) {\n      start = pos + 1;\n      pos = parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) {\n      label = state.src.slice(labelStart, labelEnd);\n    }\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n    var newState = new state.md.inline.State(state.src.slice(labelStart, labelEnd), state.md, state.env, tokens = []);\n    newState.md.inline.tokenize(newState);\n    token = state.push('image', 'img', 0);\n    token.attrs = attrs = [['src', href], ['alt', '']];\n    token.children = tokens;\n    if (title) {\n      attrs.push(['title', title]);\n    }\n  }\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};","map":{"version":3,"names":["parseLinkLabel","require","parseLinkDestination","parseLinkTitle","normalizeReference","module","exports","image","state","silent","attrs","code","label","labelEnd","labelStart","pos","ref","res","title","token","tokens","start","href","oldPos","max","posMax","src","charCodeAt","ok","md","normalizeLink","str","validateLink","env","references","slice","newState","inline","State","tokenize","push","children"],"sources":["E:/Projects/ASPHENIX/Pokedex-AI-v1/node_modules/markdown-it/lib/rules_inline/image.js"],"sourcesContent":["// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar parseLinkLabel       = require('../helpers/parse_link_label');\nvar parseLinkDestination = require('../helpers/parse_link_destination');\nvar parseLinkTitle       = require('../helpers/parse_link_title');\nvar normalizeReference   = require('../common/utils').normalizeReference;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (code !== 0x20 && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (code !== 0x20 && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (code !== 0x20 && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    // [foo]  [bar]\n    //      ^^ optional whitespace (can include newlines)\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (code !== 0x20 && code !== 0x0A) { break; }\n    }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    var newState = new state.md.inline.State(\n      state.src.slice(labelStart, labelEnd),\n      state.md,\n      state.env,\n      tokens = []\n    );\n    newState.md.inline.tokenize(newState);\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}