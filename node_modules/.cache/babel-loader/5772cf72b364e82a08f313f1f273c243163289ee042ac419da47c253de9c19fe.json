{"ast":null,"code":"// Block quotes\n\n'use strict';\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var nextLine,\n    lastLineEmpty,\n    oldTShift,\n    oldBMarks,\n    oldIndent,\n    oldParentType,\n    lines,\n    terminatorRules,\n    token,\n    i,\n    l,\n    terminate,\n    pos = state.bMarks[startLine] + state.tShift[startLine],\n    max = state.eMarks[startLine];\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E /* > */) {\n    return false;\n  }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) {\n    return true;\n  }\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20) {\n    pos++;\n  }\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n  oldBMarks = [state.bMarks[startLine]];\n  state.bMarks[startLine] = pos;\n\n  // check if we have an empty blockquote\n  pos = pos < max ? state.skipSpaces(pos) : pos;\n  lastLineEmpty = pos >= max;\n  oldTShift = [state.tShift[startLine]];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    if (state.tShift[nextLine] < oldIndent) {\n      break;\n    }\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n    if (state.src.charCodeAt(pos++) === 0x3E /* > */) {\n      // This line is inside the blockquote.\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20) {\n        pos++;\n      }\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n      pos = pos < max ? state.skipSpaces(pos) : pos;\n      lastLineEmpty = pos >= max;\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) {\n      break;\n    }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n\n    // A negative number means that this is a paragraph continuation;\n    //\n    // Any negative number will do the job here, but it's better for it\n    // to be large enough to make any bugs obvious.\n    state.tShift[nextLine] = -1;\n  }\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  token = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map = lines = [startLine, 0];\n  state.md.block.tokenize(state, startLine, nextLine);\n  token = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n  }\n  state.blkIndent = oldIndent;\n  return true;\n};","map":{"version":3,"names":["module","exports","blockquote","state","startLine","endLine","silent","nextLine","lastLineEmpty","oldTShift","oldBMarks","oldIndent","oldParentType","lines","terminatorRules","token","i","l","terminate","pos","bMarks","tShift","max","eMarks","src","charCodeAt","blkIndent","skipSpaces","md","block","ruler","getRules","push","length","parentType","markup","map","tokenize","line"],"sources":["E:/Projects/ASPHENIX/Pokedex-AI-v1/node_modules/markdown-it/lib/rules_block/blockquote.js"],"sourcesContent":["// Block quotes\n\n'use strict';\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var nextLine, lastLineEmpty, oldTShift, oldBMarks, oldIndent, oldParentType, lines,\n      terminatorRules, token,\n      i, l, terminate,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20) { pos++; }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  // check if we have an empty blockquote\n  pos = pos < max ? state.skipSpaces(pos) : pos;\n  lastLineEmpty = pos >= max;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    if (state.tShift[nextLine] < oldIndent) { break; }\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */) {\n      // This line is inside the blockquote.\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20) { pos++; }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      pos = pos < max ? state.skipSpaces(pos) : pos;\n      lastLineEmpty = pos >= max;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n\n    // A negative number means that this is a paragraph continuation;\n    //\n    // Any negative number will do the job here, but it's better for it\n    // to be large enough to make any bugs obvious.\n    state.tShift[nextLine] = -1;\n  }\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}